struct RepNote
    U duty
    UU pitch
    U vol_size
    UUU vol_ptr
    UUU vol_len_ptr
    U vol_index
    U vol_counter

vars /eno_voices
    RepNote[] sq1_voices = RepNote[](
        RepNote(
            U(1),
            UU($10C), // high Ab
            U(len(sq1_1_vol)),
            UUU(@sq1_1_vol),
            UUU(@sq1_1_len),
            U(0),
            U(0)
        )
    )

fn update_eno()
    sq1_voices[0].vol_counter += 1

    // handle sq1
    CCC/eno_vols vol_ptr = CCC/eno_vols(sq1_voices[0].vol_ptr)
    CCC/eno_vols vol_len_ptr = CCC/eno_vols(sq1_voices[0].vol_len_ptr)
    U vol_len = vol_len_ptr[sq1_voices[0].vol_index]

    // check if duration has been fulfilled
    if vol_len == sq1_voices[0].vol_counter
        sq1_voices[0].vol_counter = 0
        sq1_voices[0].vol_index += 1
        // check if we loop the envelope
        if sq1_voices[0].vol_index == sq1_voices[0].vol_size
            sq1_voices[0].vol_index = 0
    sq1_duty = sq1_voices[0].duty
    sq1_vol = vol_ptr[sq1_voices[0].vol_index]
    set_sq1_timbre()
