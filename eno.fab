struct RepNote
    U duty
    UU pitch
    U vol_size
    CC/eno_vols vol_ptr
    CC/eno_vols vol_len_ptr
    U vol_index
    U vol_counter

omni data /voice_orders
    [] voice_order
        U(1)
        U(3)
        U(2)
        U(1)
        U(2)
        U(3)
        U(2)
        U(1)
        U(3)
        U(2)
        U(3)
        U(1)
        U(3)
        U(2)
        U(1)
        U(3)
        U(1)
        U(2)

vars /eno_voices
    RepNote[7] voices


fn update_eno()
: employs /eno_voices/eno_vols
    // increment all counters
    for U i = 0; i < len(voices); i += 1
        CC/eno_vols vol_ptr = CC/eno_vols(voices[i].vol_ptr)
        CC/eno_vols vol_len_ptr = CC/eno_vols(voices[i].vol_len_ptr)
        voices[i].vol_counter += 1
        U vol_len = vol_len_ptr[voices[i].vol_index]
        if vol_len == voices[i].vol_counter
            voices[i].vol_counter = 0
            voices[i].vol_index += 1
            // check if we loop the envelope
            if voices[i].vol_index == voices[i].vol_size
                voices[i].vol_index = 0
    // TODO: use global counter to get order to update each thing
    update_sq1(0)
    update_sq2(2)
    update_tri(6)

fn update_sq1(U i)
: employs /eno_voices/sound
    CC/eno_vols vol_ptr = CC/eno_vols(voices[i].vol_ptr)

    // check if duration has been fulfilled
    sq1_duty = voices[i].duty
    if sq1_vol == 0 && vol_ptr[voices[i].vol_index] > 0
        sq1_pitch = voices[i].pitch
        set_sq1_pitch()
    sq1_vol = vol_ptr[voices[i].vol_index]
    set_sq1_timbre()

fn update_sq2(U i)
: employs /eno_voices/sound
    CC/eno_vols vol_ptr = CC/eno_vols(voices[i].vol_ptr)

    // check if duration has been fulfilled
    sq2_duty = voices[i].duty
    if sq2_vol == 0 && vol_ptr[voices[i].vol_index] > 0
        sq2_pitch = voices[i].pitch
        set_sq2_pitch()
    sq2_vol = vol_ptr[voices[i].vol_index]
    set_sq2_timbre()

fn update_tri(U i)
    tri_pitch = voices[i].pitch
    CC/eno_vols vol_ptr = CC/eno_vols(voices[i].vol_ptr)
    if vol_ptr[voices[i].vol_index] > 0
        play_tri()
